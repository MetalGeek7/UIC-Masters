Banking Application
-------------------

This is an Eclipse Dynamic web project containing application code, test cases, setup and front-end code.

1.Tools Required
  --------------
	Mandatory
	---------
		1. Apache Tomcat v6.0 (*recommended) or above
		2. JDK 1.7.51(*recommended) or above
		3. Postgresql 9.3.1
		4. Eclipse IDE 3.6 Helios (*recommended) or higher, for Java Developers https://www.eclipse.org/downloads/packages/release/helios/sr2)
		   download the appropriate version of eclipse, then select Help-> Install New Software -> Put the URL: http://download.eclipse.org/releases/<versionname> in the 'Work With' field. )
		   for eg.: # Eclipse 4.3 (Kepler release)
		            http://download.eclipse.org/releases/kepler 
		   Check the complete `Web, XML, Java EE deve...` option and follow the rest of the installation.
		5. To configure Eclipse WTP Server Runtime environment, select from the menu Window -> Preferences -> Server -> Runtime Environments (Add New Runtime and Select the appropriate version of Tomcat which has been installed on the system in the previous steps)
	
	Optional
	--------
		1. Python 2.7 (to generate extra-data.sql file, i.e. 300MB database) [this file is already provided]
		2. CodePro (https://developers.google.com/java-dev-tools/download-codepro)		(for Coverage reports)		
		3. EclEmma (http://www.eclemma.org/installation.html)                           (for Coverage reports)
		   We recommend using Option 1 on Eclemma website.

2.Setup
  -----
  a)Introduction
	------------
	After importing the 'BankWeb' project, there may be errors related to invalid JDK and Apache Tomcat.
	Please fix them by updating JDK and Tomcat references to the right version/ path respectively.
	
	This project was compiled and executed with JDK 1.7.0_51 and Apache Tomcat v6 on OSX Mavericks. Please update the references of all the .jar files specified in the lib folder or include them in the build path of the 'BankWeb' project after importing it in eclipse. This might be helpful for fixing errors in the project after import.	
	However, the code is entirely platform independent.

  b)Database Setup
	--------------
	Please install Postgresql(*recommended: PostgreSQL 9.3.1) from (http://www.postgresql.org/download/)
	
	Using pgAdmin, please set-up the project database using these parameters:
	database name : group2db
	new user with name: postgres
	having password: 	password
	database should be started on default port: 5432
	
	Once this is done, 
		1. Close pgAdmin tool
		2. Execute SetupNormalDatabaseTest.java(in test package) as JUnit Test 
		3. If it runs successfully, then the file group2db.sql is executed safely and the database has been successfully configured.
		4. If it fails, then either some connection to database (via pgAdmin or some way) is present or the configuration parameters were not followed as specified above.
	
  c)How to import 300MB database
	----------------------------
	
	* 'extra-data.sql' was generated with the python file: generate300MBdatabase.py
	* To execute the python file, python2.7 should be installed in the system where the data has to be imported.
	* After execution, extra-data.sql of about 300MB is generated.
	* To setup database with 300MB amount of data, both group2db.sql and extra-data.sql are important.
	* Both files are provided in the project and hence the sql file generation step is **optional**
	
	For the following steps, it is assumed that the *Database Setup* from above was successful. 
		1. Execute Setup300MBTest.java as JUnit Test.
		2. This will first execute group2db.sql and then extra-data.sql(generated by running the python file)
		3. The above step will take around 30-35 minutes
			(with eclipse set to use --launcher.XXMaxPermSize to 256m)
		4. If the test succeeds, it now uses the newly generated 300MB database.
		5. If it fails, then either some active connection to database (via pgAdmin or some other client accessing the Db) is present or 
			the configuration parameters were not followed as specified above.
	
	Initial Run
	-----------
		1. Right-click Project and Run As -> Run on Server. 
			(assuming database is up and there are no active connections to group2db database)
		2. This should start tomcat and open Login.jsp
		3. If Login.jsp is displayed properly then the setup was successful. 
	
	** This completes the Setup phase.

3.Running the Project
  -------------------
	This phase assumes that the Setup phase was completed till at least *Database Setup* section in the Setup phase.
	
	We recommend following the video file to navigate through the front-end and 
	use the various controls provided on the user interface.
	
	You may use these values to test different parts:
	1) User Logins:
		Username, Password : 
		 a) apatil4, password
		 
	2) Account Details for apatil4:
		AccountType, accountID(i.e account number)
		a) Checkings : 7
		b) Savings   : 13
		c) Credit    : 19
		d) Rewards   : 25
		
		all accounts (except credit type accounts) have pin = 8888
		all credit accounts have pin = 888
		Credit Card Number for apatil4: 8888888888888887
		
	
4.Testing using JUnit and DBUnit
  ------------------------------
	
  a)Design of every Test
	--------------------
	
	Each test is represented by a separate Java class. The test uses DBUnit to set-up a *new test database* on-the-fly
	which is created before Test execution and dropped after Test Execution.
	
	All tests use *their own test database*
	
	1. Every Test class has a function createSchema() which is responsible for creating the new database and the tables within it.
	2. Every Test class has a function cleanUp() which is responsible for dropping the database.
	3. Every Test class has a function annotated with @Test which: 
		a. Imports the data required for the test into database using the relevant xml file located in the testData folder.
		b. Retrieves the connection object used by DBUnit to import data as mentioned above.
		c. Then plugs this connection object into the backend so that backend uses only this connection
		d. Executes functions in backend normally, as if there was no test being carried out.
		e. Asserts some value which determines the success/failure of the test.
		f. NOTE: The name of the function in Test class annotated with @Test is not important but the Test Class Name describes the test being carried out.
	
  b)Running the Tests
    -----------------
	
		IMPORTANT: Not all the classes in the test package are used to test the backend. 
		
		1. Please refer Coverage.java file.
		2. This file is a JUnit Test Suite which has all the classes which are the *actual* Test Classes
		3. Execute Coverage.java as JUnit Test to execute all the test cases at once.
		4. Or, you can execute only those classes specified in Test Suite one at a time 
		5. If CodePro and EclEmma are installed in the eclipse, you can run Coverage.java by
		   right clicking Coverage.java -> Coverage As -> JUnit Test
		6. The test coverage is about 82 %
		

* Note : All the recommended versions of the software were used as a standard development 
  environment by the developers while working on the project but the application will work completely 
  fine on the higher stable versions of all the software used by the project.		