package newEntities;

// Generated Oct 20, 2012 3:07:20 AM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * UserData generated by hbm2java
 */
@Entity
@Table(name = "user_data", catalog = "songrecosystem", uniqueConstraints = @UniqueConstraint(columnNames = "login_name"))
public class UserData implements java.io.Serializable {

	private String userId;
	private String userName;
	private String loginName;
	private String userDob;
	private String userLocation;
	private String userPreferredGenre;
	private String userPreferredArtist;
	private Set<SongsShared> songsShareds = new HashSet<SongsShared>(0);
	private Set<UserPlaycount> userPlaycounts = new HashSet<UserPlaycount>(0);
	private Set<SongsLiked> songsLikeds = new HashSet<SongsLiked>(0);
	private Set<ArtistsLiked> artistsLikeds = new HashSet<ArtistsLiked>(0);
	private Set<UserSecurity> userSecurities = new HashSet<UserSecurity>(0);
	private Set<ArtistRating> artistRatings = new HashSet<ArtistRating>(0);
	private Set<AlbumsLiked> albumsLikeds = new HashSet<AlbumsLiked>(0);
	private Set<SongRating> songRatings = new HashSet<SongRating>(0);
	private Set<AlbumsPurchased> albumsPurchaseds = new HashSet<AlbumsPurchased>(
			0);
	private Set<AlbumsShared> albumsShareds = new HashSet<AlbumsShared>(0);
	private Set<AlbumRating> albumRatings = new HashSet<AlbumRating>(0);
	private Set<SongsPurchased> songsPurchaseds = new HashSet<SongsPurchased>(0);

	public UserData() {
	}

	public UserData(String userId) {
		this.userId = userId;
	}

	public UserData(String userId, String userName, String loginName,
			String userDob, String userLocation, String userPreferredGenre,
			String userPreferredArtist, Set<SongsShared> songsShareds,
			Set<UserPlaycount> userPlaycounts, Set<SongsLiked> songsLikeds,
			Set<ArtistsLiked> artistsLikeds, Set<UserSecurity> userSecurities,
			Set<ArtistRating> artistRatings, Set<AlbumsLiked> albumsLikeds,
			Set<SongRating> songRatings, Set<AlbumsPurchased> albumsPurchaseds,
			Set<AlbumsShared> albumsShareds, Set<AlbumRating> albumRatings,
			Set<SongsPurchased> songsPurchaseds) {
		this.userId = userId;
		this.userName = userName;
		this.loginName = loginName;
		this.userDob = userDob;
		this.userLocation = userLocation;
		this.userPreferredGenre = userPreferredGenre;
		this.userPreferredArtist = userPreferredArtist;
		this.songsShareds = songsShareds;
		this.userPlaycounts = userPlaycounts;
		this.songsLikeds = songsLikeds;
		this.artistsLikeds = artistsLikeds;
		this.userSecurities = userSecurities;
		this.artistRatings = artistRatings;
		this.albumsLikeds = albumsLikeds;
		this.songRatings = songRatings;
		this.albumsPurchaseds = albumsPurchaseds;
		this.albumsShareds = albumsShareds;
		this.albumRatings = albumRatings;
		this.songsPurchaseds = songsPurchaseds;
	}

	@Id
	@Column(name = "user_id", unique = true, nullable = false, length = 15)
	public String getUserId() {
		return this.userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	@Column(name = "user_name", length = 30)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "login_name", unique = true, length = 15)
	public String getLoginName() {
		return this.loginName;
	}

	public void setLoginName(String loginName) {
		this.loginName = loginName;
	}

	@Column(name = "user_dob", length = 4)
	public String getUserDob() {
		return this.userDob;
	}

	public void setUserDob(String userDob) {
		this.userDob = userDob;
	}

	@Column(name = "user_location", length = 30)
	public String getUserLocation() {
		return this.userLocation;
	}

	public void setUserLocation(String userLocation) {
		this.userLocation = userLocation;
	}

	@Column(name = "user_preferred_genre", length = 15)
	public String getUserPreferredGenre() {
		return this.userPreferredGenre;
	}

	public void setUserPreferredGenre(String userPreferredGenre) {
		this.userPreferredGenre = userPreferredGenre;
	}

	@Column(name = "user_preferred_artist", length = 15)
	public String getUserPreferredArtist() {
		return this.userPreferredArtist;
	}

	public void setUserPreferredArtist(String userPreferredArtist) {
		this.userPreferredArtist = userPreferredArtist;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<SongsShared> getSongsShareds() {
		return this.songsShareds;
	}

	public void setSongsShareds(Set<SongsShared> songsShareds) {
		this.songsShareds = songsShareds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<UserPlaycount> getUserPlaycounts() {
		return this.userPlaycounts;
	}

	public void setUserPlaycounts(Set<UserPlaycount> userPlaycounts) {
		this.userPlaycounts = userPlaycounts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<SongsLiked> getSongsLikeds() {
		return this.songsLikeds;
	}

	public void setSongsLikeds(Set<SongsLiked> songsLikeds) {
		this.songsLikeds = songsLikeds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<ArtistsLiked> getArtistsLikeds() {
		return this.artistsLikeds;
	}

	public void setArtistsLikeds(Set<ArtistsLiked> artistsLikeds) {
		this.artistsLikeds = artistsLikeds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<UserSecurity> getUserSecurities() {
		return this.userSecurities;
	}

	public void setUserSecurities(Set<UserSecurity> userSecurities) {
		this.userSecurities = userSecurities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<ArtistRating> getArtistRatings() {
		return this.artistRatings;
	}

	public void setArtistRatings(Set<ArtistRating> artistRatings) {
		this.artistRatings = artistRatings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<AlbumsLiked> getAlbumsLikeds() {
		return this.albumsLikeds;
	}

	public void setAlbumsLikeds(Set<AlbumsLiked> albumsLikeds) {
		this.albumsLikeds = albumsLikeds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<SongRating> getSongRatings() {
		return this.songRatings;
	}

	public void setSongRatings(Set<SongRating> songRatings) {
		this.songRatings = songRatings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<AlbumsPurchased> getAlbumsPurchaseds() {
		return this.albumsPurchaseds;
	}

	public void setAlbumsPurchaseds(Set<AlbumsPurchased> albumsPurchaseds) {
		this.albumsPurchaseds = albumsPurchaseds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<AlbumsShared> getAlbumsShareds() {
		return this.albumsShareds;
	}

	public void setAlbumsShareds(Set<AlbumsShared> albumsShareds) {
		this.albumsShareds = albumsShareds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<AlbumRating> getAlbumRatings() {
		return this.albumRatings;
	}

	public void setAlbumRatings(Set<AlbumRating> albumRatings) {
		this.albumRatings = albumRatings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userData")
	public Set<SongsPurchased> getSongsPurchaseds() {
		return this.songsPurchaseds;
	}

	public void setSongsPurchaseds(Set<SongsPurchased> songsPurchaseds) {
		this.songsPurchaseds = songsPurchaseds;
	}

}
